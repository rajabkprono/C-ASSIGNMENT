Object-Oriented Programming (OOP) refers to a programming paradigm based on the concept of "objects," which are instances of classes. OOP allows for data and methods to be bundled together, making the code modular, reusable, and easier to maintain. The key OOP principles include Encapsulation, Inheritance, Polymorphism, and Abstraction.

Encapsulation involves restricting direct access to some of an object's components and only allowing access through methods. This is typically achieved by making the attributes private and providing public getter and setter methods to access and modify them. Example: A class Employee may have private attributes such as name and salary with public methods like getSalary() and setSalary() to access and modify them.

Inheritance allows a class (derived class) to inherit attributes and methods from another class (base class). This helps to reuse code and create a hierarchy of classes. Example: A class Manager might inherit from the base class Employee and add new attributes like department.

Polymorphism enables objects to be treated as instances of their parent class, but the actual method invoked is determined by the objectâ€™s actual class. This is typically achieved through method overriding. Example: The Display() method can be overridden in a derived class Manager to display specific details for a manager.

Abstraction involves hiding the complex implementation details and exposing only the necessary features to the user. In C++, abstraction is achieved using abstract classes or interfaces. Example: An abstract class Employee can define a method displayDetails(), but its implementation can vary in the derived classes.
